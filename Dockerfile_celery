FROM nvidia/cuda:12.1.1-cudnn8-runtime-ubuntu22.04

# Define build arguments with default fallback values
ARG USER_UID=1000
ARG USER_GID=1000

# Create a non-root user and group
RUN groupadd -g $USER_GID celerygroup && \
    useradd -m -u $USER_UID -g celerygroup celeryuser

# Install required packages: software-properties-common to add PPAs, curl, and Python 3.12 along with its venv and distutils packages.
ENV DEBIAN_FRONTEND=noninteractive
# 1) Install prerequisites for adding PPAs
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      software-properties-common \
      ca-certificates \
    gnupg \
    git && \
    rm -rf /var/lib/apt/lists/*

# 2) Add the Deadsnakes PPAâ€™s GPG key & repository
RUN apt-get update && \
    add-apt-repository ppa:deadsnakes/ppa -y && \
    apt-get update

# 3) Install Python 3.12 and its venv package
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      python3.12 \
      python3.12-venv \
      python3-pip && \
    rm -rf /var/lib/apt/lists/*

# Set the working directory in the container
WORKDIR /app

# Copy the project files into the container
COPY --chown=celeryuser:celerygroup . /app

# Upgrade pip and install the "uv" tool which manages the project
RUN pip install --upgrade pip && pip install uv

# Create a virtual environment using uv with Python 3.12
RUN uv venv --python 3.12

# "Activate" the venv for subsequent commands by updating PATH.
# This makes executables from the venv (like pip) available.
ENV PATH="/app/.venv/bin:$PATH"

# Install only the "celery" extra dependencies defined in pyproject file
RUN uv pip install -r pyproject.toml --extra celery

# Set the folder structure and permissions - ensure /app directory itself is owned by celeryuser
RUN chown celeryuser:celerygroup /app \
    && mkdir /data \
    && chown -R celeryuser:celerygroup /data \
    && mkdir -p /home/celeryuser/.cellpose/models \
    && chown -R celeryuser:celerygroup /home/celeryuser/.cellpose

USER celeryuser

# Start the celery GPU worker (no autoreload watcher in production); tune for stability and lower memory pressure
CMD ["celery", "-A", "cp_server.tasks_server.celery_app:celery_app", "worker", "-Q", "gpu_tasks", "--concurrency=2", "--prefetch-multiplier=1", "--max-tasks-per-child=10", "--without-gossip", "--without-mingle", "--heartbeat-interval=30", "--loglevel=info"]